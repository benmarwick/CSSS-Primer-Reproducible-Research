Reproducible Research: A primer for the social sciences
========================================================
author: Ben Marwick
date: February 2014
---
ext_widgets : {rCharts: libraries/nvd3}
---

Motivations
========================================================

>"An article about computational result is advertising, not scholarship. The actual scholarship is the full software environment, code and data, that produced the result." <small>- Claerbout and Karrenbach, Proceedings of the 62nd Annual International Meeting of the Society of Exploration Geophysics. 1992</small>

>"When we publish articles containing figures which were generated by computer, we also publish the complete software environment which generates the figures" <small>- Buckheit & Donoho, Wavelab and Reproducible Research, 1995.</small>


Yields & Restrictions
=======================================================
- Verification: easier to find and fix bugs
- Transparency: leads increased citation count, broader impact
- Efficiency: via de-duplication of effort

***

- Classified or sensitive data
- Nondisclosure agreements
- Software licensing issues


Spectrum of reproducibility
=======================================================
![alt text](figures/peng-spectrum.jpg)
<small>Peng 2011, Science 334(6060) pp. 1226-1227</small>

Research pipeline
=======================================================
![alt text](figures/peng-pipeline.jpg)
<small>http://www.stodden.net/AMP2011/slides/pengslides.pdf</small>

Click trails are ephemeral 
========================================================
- GUIs and copy-paste are bad for reproducibility 
- A lot of manual & ad hoc data handling
- Leaves no trace
- Difficult to document
- Difficult to remember

***

![alt text](figures/contrails.jpg)


Scripted analyses endure
========================================================


![alt text](figures/open-science.png)

***

Plain text files and UTF-8 encoding will be readable for a long time

They are much more accessible

Literate statistical programming 
========================================================
>"Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to humans what we want the computer to do."-- Donald E. Knuth, Literate Programming, 1984

***

For example...
Let's calculate the current time in R.
```{r}
time <- format(Sys.time(), "%a %b %d %X %Y")
```
The text and R code are interwoven in the output:

The time is `` `r '\x60r time\x60'` ``

The time is `r time`

Advantages and disadvantages
========================================================
Advantages of switching to literate programming
- Text and code all in one place, in logical order
- Data, results automatically updated to reflect external changes
- Automatic test when building document

Some disadvantages
- Text and code all in one place; can be hard to read sometimes, especially if there is a lot of code
- Can substantially slow down the processing of documents
(although caching can help)

Need a programming language
========================================================
Machine-readable

R: Free, open source, cross-platform, huge user community

R packages: the ideal 'Compendium'

![alt text](figures/r-project.jpg)

***

>both a container for the different elements that make up the document and its computations (i.e. text, code, data, etc.), and as a means for distributing, managing and updating the collection... allow us to move from an era of advertisement to one where our scholarship itself is published <small>- Gentleman and Temple Lang 2004</small>

========================================================
Very low barrier to documentation of code with roxygen2

![alt text](figures/packages.png)

Need a document formatting language
========================================================

![alt text](figures/markdown.png)

Markdown: lightweight, human-readable document formatting syntax
based on email text formatting

***

R Markdown: minor extensions to allow R code display and execution, embed images in html files, equations

One package to rule them all
========================================================
knitr - descendant of Sweave

![alt text](figures/knitr.png)

***

'dynamic documents' put narrative and code in the same location

When data or narrative are updated, the document is automatically updated


Version control
========================================================
>Payoffs

- Eases collaboration
- Can track changes in any file type, and who made them
- Can revert file to any point in its tracked history

>Costs

- 2-3 days to learn
- Takes a long time to master

***

![alt text](figures/git.png)
![alt text](figures/github.png)
![alt text](figures/bitbucket.png)

Environment for reproducible research
========================================================
RStudio has integrated R console, support for markdown and git

RStudio 'projects' make version control trivial

***

![alt text](figures/rstudio.png)

Interactive charts in the browser with the rCharts package
========================================================
```{r nvd3plot1, results = 'asis', comment = NA, message = F, echo = F} 
# this only works when the presentation is saved as HTML
# and when the cache folder is available 
require(rCharts)
n1 <- nPlot(mpg ~ wt, data = mtcars, type = 'scatterChart')
n1$addParams(width = 600, height = 300)
n1
```

Interactive charts in the browser with the rCharts package
========================================================
```{r nvd3plot2, results = 'asis', comment = NA, message = F, echo = F} 
# this only works when the presentation is saved as HTML
# and when the cache folder is available
require(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n2 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n2$addParams(width = 600, height = 300)
n2
```

Interactive charts in the browser with brief code
========================================================
```
require(rCharts)
n1 <- nPlot(mpg ~ wt, data = mtcars, type = 'scatterChart')
n1$addParams(width = 600, height = 300)
n1 
```
```
require(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n2 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n2$addParams(width = 600, height = 300)
n2
```

The Hierarchy of Code Reproducibility
========================================================
- Good: Use an integrated development environment (IDE). Keep your code in one place, let it do what itâ€™s supposed to. (RStudio)
- Better: Use version control. Help yourself keep track of changes, fix bugs and improve project management (Git & GitHub or BitBucket)
- Best: Use embedded code. Explicitly link code and text, save yourself time, save reviewers time, improve your code. (R Markdown & knitr)


Releasing output into the wild
========================================================
pandoc

A universal document converter

Easily convert markdown file to many formats (HTML, PDF, DOCX, etc)

***

Depositing Paper, code and data
========================================================
>Payoffs

- Free space for hosting
- Assignment of persistent DOIs
- Tracking citation metrics (FigShare, ORCID)

>Costs

- Sometimes license restrictions
- Limited or no private storage space

***
![alt text](figures/figshare.png)
![alt text](figures/dryad.png)

Ongoing problems
========================================================
- Reproducing big data and supercomputing research is hard
- Making sure that source code works on other people's computers
is hard
- Keeping detailed enough records is hard

Changing the culture and reward structure
========================================================


Colophon
========================================================
Presentation written in Markdown

Compiled into HTML using RStudio

Source code hosting:
https://github.com/benmarwick/CSSS-Primer-Reproducible-Research

FigShare DOI:

ORCID: http://orcid.org/0000-0001-7879-4531

Licensing: 

* Presentation: CC-BY-3.0 

* Source code: MIT 

References
========================================================
See Rpres file for full references
```{r, echo=FALSE}
# Buckheit, J.B. and Donoho, D.L. Wavelab and reproducible research. (1995).
# Morin, A. et al. Shining light into black boxes. Science. 336, (2012), 159-160.
# King, G. Replication, Replication. PS: Political Science and Politics. (1995).
# Schofield, P.N. et al. Post-publication sharing of data and tools. Nature. 461, (2009), 171-173.
# Birney, E. et al. Prepublication data sharing. Nature. 461, (2009), 168-70.
# Peng, R.D. Reproducible research and Biostatistics. Biostatistics (Oxford, England). 10, (2009), 405-408.
# Vandewalle, P. et al. Reproducible research in signal processing - What, why, and how. IEEE Signal Processing Magazine.
# 26, (2009), 37-47.
# Stodden, V. The Legal Framework for Reproducible Scientic Research: Licensing and Copyright. Computing in Science &
# Engineering. 11, (2009), 35-40.
# Merali, Z. Error: Why scientic programming does not compute. Nature. (2010), 6-8.
# Barnes, N. Publish your computer code: it is good enough. Nature. 467, (2010), 753.
# LeVeque, R.J. Python tools for reproducible research on hyperbolic problems. Computing in Science & Engineering. (2009),
# 19-27. 
# LeVeque, R.J. Wave propagation software, computational science, and reproducible research. Proceedings of the International Congress of Mathematicians (Madrid, Spain, 2006), 1-27.
# Price, K. Anything You Can Do, I Can Do Better (No You Can't)... Computer Vision, Graphics, and Image Processing. (1986), 387-391.
# Piwowar, H. a et al. Sharing detailed research data is associated with increased citation rate. PloS one. 2, (2007), 308.
# Wilson, G. et al. Best Practices for Scientic Computing. 1-6.
# Drummond, C. Reproducible Research: a Dissenting Opinion. (2012), 1-10.
# Ioannidis, J.P. a et al. Repeatability of published microarray gene expression analyses. Nature genetics. 41, (2009), 149-55.
# Savage, C.J. and Vickers, A.J. Empirical study of data sharing by authors publishing in PLoS journals. PloS one. 4, (2009),
# 7078.
# Quirk, J. Computational Science \Same Old Silence, Same Old Mistakes" \Something More Is Needed..." Adaptive Mesh
# Reenement-Theory and Applications. (2005), 4-28.
# McCullough, B.D. Got Replicability? The Journal of Money, Credit and Banking Archive. Econ Journal Watch. 4, (2007),
# 326-337.
# McCullough, B.D. Do economics journal archives promote replicable research?. Economics Journal Archives. (2008).
# Manolescu, I. et al. Repeatability & Workability Evaluation of SIGMOD 2009. SIGMOD 2009 (2009), 2-4.
# Freire, J. et al. Computational reproducibility: state-of-the-art, challenges, and database research opportunities. SIGMOD
# 2012 (2012), 593-596.
```

